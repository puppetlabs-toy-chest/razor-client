---
http_interactions:
- request:
    method: get
    uri: http://localhost:8150/api
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Accept-Language:
      - en_US,en
      User-Agent:
      - Faraday v0.15.4
      Authorization:
      - Basic Og==
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - Apache-Coyote/1.1
      X-Content-Type-Options:
      - nosniff
      Content-Type:
      - application/json
      Content-Length:
      - '7432'
      Date:
      - Fri, 23 Aug 2019 19:49:24 GMT
    body:
      encoding: UTF-8
      string: '{"commands":[{"name":"update-repo-task","rel":"http://api.puppetlabs.com/razor/v1/commands/update-repo-task","id":"http://localhost:8150/api/commands/update-repo-task"},{"name":"delete-hook","rel":"http://api.puppetlabs.com/razor/v1/commands/delete-hook","id":"http://localhost:8150/api/commands/delete-hook"},{"name":"delete-broker","rel":"http://api.puppetlabs.com/razor/v1/commands/delete-broker","id":"http://localhost:8150/api/commands/delete-broker"},{"name":"register-node","rel":"http://api.puppetlabs.com/razor/v1/commands/register-node","id":"http://localhost:8150/api/commands/register-node"},{"name":"update-policy-broker","rel":"http://api.puppetlabs.com/razor/v1/commands/update-policy-broker","id":"http://localhost:8150/api/commands/update-policy-broker"},{"name":"update-policy-task","rel":"http://api.puppetlabs.com/razor/v1/commands/update-policy-task","id":"http://localhost:8150/api/commands/update-policy-task"},{"name":"set-node-desired-power-state","rel":"http://api.puppetlabs.com/razor/v1/commands/set-node-desired-power-state","id":"http://localhost:8150/api/commands/set-node-desired-power-state"},{"name":"set-node-hw-info","rel":"http://api.puppetlabs.com/razor/v1/commands/set-node-hw-info","id":"http://localhost:8150/api/commands/set-node-hw-info"},{"name":"run-hook","rel":"http://api.puppetlabs.com/razor/v1/commands/run-hook","id":"http://localhost:8150/api/commands/run-hook"},{"name":"create-policy","rel":"http://api.puppetlabs.com/razor/v1/commands/create-policy","id":"http://localhost:8150/api/commands/create-policy"},{"name":"reinstall-node","rel":"http://api.puppetlabs.com/razor/v1/commands/reinstall-node","id":"http://localhost:8150/api/commands/reinstall-node"},{"name":"disable-policy","rel":"http://api.puppetlabs.com/razor/v1/commands/disable-policy","id":"http://localhost:8150/api/commands/disable-policy"},{"name":"enable-policy","rel":"http://api.puppetlabs.com/razor/v1/commands/enable-policy","id":"http://localhost:8150/api/commands/enable-policy"},{"name":"create-repo","rel":"http://api.puppetlabs.com/razor/v1/commands/create-repo","id":"http://localhost:8150/api/commands/create-repo"},{"name":"remove-node-metadata","rel":"http://api.puppetlabs.com/razor/v1/commands/remove-node-metadata","id":"http://localhost:8150/api/commands/remove-node-metadata"},{"name":"modify-node-metadata","rel":"http://api.puppetlabs.com/razor/v1/commands/modify-node-metadata","id":"http://localhost:8150/api/commands/modify-node-metadata"},{"name":"update-policy-node-metadata","rel":"http://api.puppetlabs.com/razor/v1/commands/update-policy-node-metadata","id":"http://localhost:8150/api/commands/update-policy-node-metadata"},{"name":"add-policy-tag","rel":"http://api.puppetlabs.com/razor/v1/commands/add-policy-tag","id":"http://localhost:8150/api/commands/add-policy-tag"},{"name":"remove-policy-tag","rel":"http://api.puppetlabs.com/razor/v1/commands/remove-policy-tag","id":"http://localhost:8150/api/commands/remove-policy-tag"},{"name":"create-hook","rel":"http://api.puppetlabs.com/razor/v1/commands/create-hook","id":"http://localhost:8150/api/commands/create-hook"},{"name":"update-policy-repo","rel":"http://api.puppetlabs.com/razor/v1/commands/update-policy-repo","id":"http://localhost:8150/api/commands/update-policy-repo"},{"name":"update-tag-rule","rel":"http://api.puppetlabs.com/razor/v1/commands/update-tag-rule","id":"http://localhost:8150/api/commands/update-tag-rule"},{"name":"delete-policy","rel":"http://api.puppetlabs.com/razor/v1/commands/delete-policy","id":"http://localhost:8150/api/commands/delete-policy"},{"name":"delete-tag","rel":"http://api.puppetlabs.com/razor/v1/commands/delete-tag","id":"http://localhost:8150/api/commands/delete-tag"},{"name":"create-tag","rel":"http://api.puppetlabs.com/razor/v1/commands/create-tag","id":"http://localhost:8150/api/commands/create-tag"},{"name":"delete-node","rel":"http://api.puppetlabs.com/razor/v1/commands/delete-node","id":"http://localhost:8150/api/commands/delete-node"},{"name":"reboot-node","rel":"http://api.puppetlabs.com/razor/v1/commands/reboot-node","id":"http://localhost:8150/api/commands/reboot-node"},{"name":"move-policy","rel":"http://api.puppetlabs.com/razor/v1/commands/move-policy","id":"http://localhost:8150/api/commands/move-policy"},{"name":"set-node-ipmi-credentials","rel":"http://api.puppetlabs.com/razor/v1/commands/set-node-ipmi-credentials","id":"http://localhost:8150/api/commands/set-node-ipmi-credentials"},{"name":"delete-repo","rel":"http://api.puppetlabs.com/razor/v1/commands/delete-repo","id":"http://localhost:8150/api/commands/delete-repo"},{"name":"modify-policy-max-count","rel":"http://api.puppetlabs.com/razor/v1/commands/modify-policy-max-count","id":"http://localhost:8150/api/commands/modify-policy-max-count"},{"name":"update-node-metadata","rel":"http://api.puppetlabs.com/razor/v1/commands/update-node-metadata","id":"http://localhost:8150/api/commands/update-node-metadata"},{"name":"create-task","rel":"http://api.puppetlabs.com/razor/v1/commands/create-task","id":"http://localhost:8150/api/commands/create-task"},{"name":"update-hook-configuration","rel":"http://api.puppetlabs.com/razor/v1/commands/update-hook-configuration","id":"http://localhost:8150/api/commands/update-hook-configuration"},{"name":"create-broker","rel":"http://api.puppetlabs.com/razor/v1/commands/create-broker","id":"http://localhost:8150/api/commands/create-broker"},{"name":"update-broker-configuration","rel":"http://api.puppetlabs.com/razor/v1/commands/update-broker-configuration","id":"http://localhost:8150/api/commands/update-broker-configuration"}],"collections":[{"name":"brokers","rel":"http://api.puppetlabs.com/razor/v1/collections/brokers","id":"http://localhost:8150/api/collections/brokers","params":{"depth":{"type":"number"}}},{"name":"repos","rel":"http://api.puppetlabs.com/razor/v1/collections/repos","id":"http://localhost:8150/api/collections/repos","params":{"depth":{"type":"number"}}},{"name":"tags","rel":"http://api.puppetlabs.com/razor/v1/collections/tags","id":"http://localhost:8150/api/collections/tags","params":{"depth":{"type":"number"}}},{"name":"policies","rel":"http://api.puppetlabs.com/razor/v1/collections/policies","id":"http://localhost:8150/api/collections/policies","params":{"depth":{"type":"number"}}},{"name":"nodes","rel":"http://api.puppetlabs.com/razor/v1/collections/nodes","id":"http://localhost:8150/api/collections/nodes","params":{"start":{"type":"number"},"limit":{"type":"number"},"depth":{"type":"number"}}},{"name":"tasks","rel":"http://api.puppetlabs.com/razor/v1/collections/tasks","id":"http://localhost:8150/api/collections/tasks","params":{"depth":{"type":"number"}}},{"name":"commands","rel":"http://api.puppetlabs.com/razor/v1/collections/commands","id":"http://localhost:8150/api/collections/commands","params":{"depth":{"type":"number"}}},{"name":"events","rel":"http://api.puppetlabs.com/razor/v1/collections/events","id":"http://localhost:8150/api/collections/events","params":{"start":{"type":"number"},"limit":{"type":"number"},"depth":{"type":"number"}}},{"name":"hooks","rel":"http://api.puppetlabs.com/razor/v1/collections/hooks","id":"http://localhost:8150/api/collections/hooks","params":{"depth":{"type":"number"}}},{"name":"config","rel":"http://api.puppetlabs.com/razor/v1/collections/config","id":"http://localhost:8150/api/collections/config"}],"version":{"server":"v1.9.5-9-g774b5ce-dirty"}}'
    http_version:
  recorded_at: Fri, 23 Aug 2019 19:49:24 GMT
- request:
    method: get
    uri: http://localhost:8150/api/commands/register-node
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Accept-Language:
      - en_US,en
      User-Agent:
      - Faraday v0.15.4
      Authorization:
      - Basic Og==
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - Apache-Coyote/1.1
      Etag:
      - '"server-version-v1.9.5-9-g774b5ce-dirty"'
      X-Content-Type-Options:
      - nosniff
      Content-Type:
      - application/json
      Content-Length:
      - '6207'
      Date:
      - Fri, 23 Aug 2019 19:49:24 GMT
    body:
      encoding: UTF-8
      string: '{"name":"register-node","help":{"summary":"Register a node with Razor
        before it is discovered","description":"In order to make brownfield deployments
        of Razor easier we allow users to\nregister nodes explicitly.  This command
        allows you to perform the same\nregistration that would happen when a new
        node checked in, ahead of time.\n\nIn order for this to be effective the hw_info
        must contain enough information\nthat the node can successfully be matched
        during the iPXE boot phase.\n\nIf the node matches an existing node, in keeping
        with the overall policy of\ncommands declaring desired state, the node installed
        field will be updated to\nmatch the value in this command.\n\nThe final state
        is that a node with the supplied hardware information, and the\ndesired installed
        state, will be present in the database, regardless of it\nexisting before
        hand or not.","schema":"# Access Control\n\nThis command''s access control
        pattern: `commands:register-node`\n\nFor more detail on how the permission
        strings are structured and work, you can\nsee the [Shiro Permissions documentation][shiro].  That
        pattern is expanded\nand then a permission check applied to it, before the
        command is authorized.\n\nThese checks only apply if security is enabled in
        the Razor configuration\nfile; on this server security is currently disabled.\n\n[shiro]:
        http://shiro.apache.org/permissions.html\n\n# Attributes\n\n * installed\n   -
        Should the node be considered ''installed'' already?  Installed nodes are\n     not
        eligible for policy matching, and will simply boot locally.\n   - This attribute
        is required.\n   - It must be of type boolean.\n\n * hw_info\n   - The hardware
        information for the node.  This is used to match the node on first\n     boot
        with the record in the database.  The order of MAC address assignment in\n     this
        data is not significant, as a node with reordered MAC addresses will be\n     treated
        as the same node.\n   - This attribute is required.\n   - It must be of type
        object.\n   - It must be between 1 and Infinity in length.\n   # Attributes\n   \n    *
        serial\n      - The DMI serial number of the node\n      - It must be of type
        string.\n   \n    * asset\n      - The DMI asset tag of the node\n      -
        It must be of type string.\n   \n    * uuid\n      - The DMI UUID of the node\n      -
        It must be of type string.\n","examples":{"api":"Register a machine before
        you boot it, and note that it already has an OS\ninstalled, so should not
        be subject to policy-based reinstallation:\n\n    {\n      \"hw_info\": {\n        \"net0\":   \"78:31:c1:be:c8:00\",\n        \"net1\":   \"72:00:01:f2:13:f0\",\n        \"net2\":   \"72:00:01:f2:13:f1\",\n        \"serial\":
        \"xxxxxxxxxxx\",\n        \"asset\":  \"Asset-1234567890\",\n        \"uuid\":   \"Not
        Settable\"\n      },\n      \"installed\": true\n    }","cli":"Register a
        machine before you boot it, and note that it already has an OS\ninstalled,
        so should not be subject to policy-based reinstallation:\n\n    razor register-node
        --hw-info net0=78:31:c1:be:c8:00 \\\n        --hw-info net1=72:00:01:f2:13:f0
        \\\n        --hw-info net2=72:00:01:f2:13:f1 \\\n        --hw-info serial=xxxxxxxxxxx
        \\\n        --hw-info asset=Asset-1234567890 \\\n        --hw-info uuid=\"Not
        Settable\" \\\n        --installed"},"full":"# SYNOPSIS\nRegister a node with
        Razor before it is discovered\n\n# DESCRIPTION\nIn order to make brownfield
        deployments of Razor easier we allow users to\nregister nodes explicitly.  This
        command allows you to perform the same\nregistration that would happen when
        a new node checked in, ahead of time.\n\nIn order for this to be effective
        the hw_info must contain enough information\nthat the node can successfully
        be matched during the iPXE boot phase.\n\nIf the node matches an existing
        node, in keeping with the overall policy of\ncommands declaring desired state,
        the node installed field will be updated to\nmatch the value in this command.\n\nThe
        final state is that a node with the supplied hardware information, and the\ndesired
        installed state, will be present in the database, regardless of it\nexisting
        before hand or not.\n# Access Control\n\nThis command''s access control pattern:
        `commands:register-node`\n\nFor more detail on how the permission strings
        are structured and work, you can\nsee the [Shiro Permissions documentation][shiro].  That
        pattern is expanded\nand then a permission check applied to it, before the
        command is authorized.\n\nThese checks only apply if security is enabled in
        the Razor configuration\nfile; on this server security is currently disabled.\n\n[shiro]:
        http://shiro.apache.org/permissions.html\n\n# Attributes\n\n * installed\n   -
        Should the node be considered ''installed'' already?  Installed nodes are\n     not
        eligible for policy matching, and will simply boot locally.\n   - This attribute
        is required.\n   - It must be of type boolean.\n\n * hw_info\n   - The hardware
        information for the node.  This is used to match the node on first\n     boot
        with the record in the database.  The order of MAC address assignment in\n     this
        data is not significant, as a node with reordered MAC addresses will be\n     treated
        as the same node.\n   - This attribute is required.\n   - It must be of type
        object.\n   - It must be between 1 and Infinity in length.\n   # Attributes\n   \n    *
        serial\n      - The DMI serial number of the node\n      - It must be of type
        string.\n   \n    * asset\n      - The DMI asset tag of the node\n      -
        It must be of type string.\n   \n    * uuid\n      - The DMI UUID of the node\n      -
        It must be of type string.\n\n# EXAMPLES\n\n  Register a machine before you
        boot it, and note that it already has an OS\n  installed, so should not be
        subject to policy-based reinstallation:\n  \n      {\n        \"hw_info\":
        {\n          \"net0\":   \"78:31:c1:be:c8:00\",\n          \"net1\":   \"72:00:01:f2:13:f0\",\n          \"net2\":   \"72:00:01:f2:13:f1\",\n          \"serial\":
        \"xxxxxxxxxxx\",\n          \"asset\":  \"Asset-1234567890\",\n          \"uuid\":   \"Not
        Settable\"\n        },\n        \"installed\": true\n      }\n"},"schema":{"installed":{"type":"boolean"},"hw_info":{"type":"object","aliases":["hw-info"]}}}'
    http_version:
  recorded_at: Fri, 23 Aug 2019 19:49:25 GMT
- request:
    method: post
    uri: http://localhost:8150/api/commands/register-node
    body:
      encoding: UTF-8
      string: '{"installed":true,"hw_info":{"net0":"abcdef"}}'
    headers:
      Content-Type:
      - application/json
      Accept:
      - application/json
      Accept-Language:
      - en_US,en
      User-Agent:
      - Faraday v0.15.4
      Authorization:
      - Basic Og==
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 202
      message: Accepted
    headers:
      Server:
      - Apache-Coyote/1.1
      X-Content-Type-Options:
      - nosniff
      Content-Type:
      - application/json
      Content-Length:
      - '203'
      Date:
      - Fri, 23 Aug 2019 19:49:24 GMT
    body:
      encoding: UTF-8
      string: '{"spec":"http://api.puppetlabs.com/razor/v1/collections/nodes/member","id":"http://localhost:8150/api/collections/nodes/node1","name":"node1","command":"http://localhost:8150/api/collections/commands/1"}'
    http_version:
  recorded_at: Fri, 23 Aug 2019 19:49:25 GMT
- request:
    method: get
    uri: http://localhost:8150/api/collections/nodes/node1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Accept-Language:
      - en_US,en
      User-Agent:
      - Faraday v0.15.4
      Authorization:
      - Basic Og==
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - Apache-Coyote/1.1
      X-Content-Type-Options:
      - nosniff
      Content-Type:
      - application/json
      Content-Length:
      - '398'
      Date:
      - Fri, 23 Aug 2019 19:49:24 GMT
    body:
      encoding: UTF-8
      string: '{"spec":"http://api.puppetlabs.com/razor/v1/collections/nodes/member","id":"http://localhost:8150/api/collections/nodes/node1","name":"node1","hw_info":{"mac":["abcdef"]},"log":{"id":"http://localhost:8150/api/collections/nodes/node1/log","name":"log","params":{"limit":{"type":"number"},"start":{"type":"number"}}},"tags":[],"state":{"installed":"true","installed_at":"2019-08-23T14:49:25-05:00"}}'
    http_version:
  recorded_at: Fri, 23 Aug 2019 19:49:25 GMT
- request:
    method: get
    uri: http://localhost:8150/api
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Accept-Language:
      - en_US,en
      User-Agent:
      - Faraday v0.15.4
      Authorization:
      - Basic Og==
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - Apache-Coyote/1.1
      X-Content-Type-Options:
      - nosniff
      Content-Type:
      - application/json
      Content-Length:
      - '7432'
      Date:
      - Fri, 23 Aug 2019 19:49:24 GMT
    body:
      encoding: UTF-8
      string: '{"commands":[{"name":"update-repo-task","rel":"http://api.puppetlabs.com/razor/v1/commands/update-repo-task","id":"http://localhost:8150/api/commands/update-repo-task"},{"name":"delete-hook","rel":"http://api.puppetlabs.com/razor/v1/commands/delete-hook","id":"http://localhost:8150/api/commands/delete-hook"},{"name":"delete-broker","rel":"http://api.puppetlabs.com/razor/v1/commands/delete-broker","id":"http://localhost:8150/api/commands/delete-broker"},{"name":"register-node","rel":"http://api.puppetlabs.com/razor/v1/commands/register-node","id":"http://localhost:8150/api/commands/register-node"},{"name":"update-policy-broker","rel":"http://api.puppetlabs.com/razor/v1/commands/update-policy-broker","id":"http://localhost:8150/api/commands/update-policy-broker"},{"name":"update-policy-task","rel":"http://api.puppetlabs.com/razor/v1/commands/update-policy-task","id":"http://localhost:8150/api/commands/update-policy-task"},{"name":"set-node-desired-power-state","rel":"http://api.puppetlabs.com/razor/v1/commands/set-node-desired-power-state","id":"http://localhost:8150/api/commands/set-node-desired-power-state"},{"name":"set-node-hw-info","rel":"http://api.puppetlabs.com/razor/v1/commands/set-node-hw-info","id":"http://localhost:8150/api/commands/set-node-hw-info"},{"name":"run-hook","rel":"http://api.puppetlabs.com/razor/v1/commands/run-hook","id":"http://localhost:8150/api/commands/run-hook"},{"name":"create-policy","rel":"http://api.puppetlabs.com/razor/v1/commands/create-policy","id":"http://localhost:8150/api/commands/create-policy"},{"name":"reinstall-node","rel":"http://api.puppetlabs.com/razor/v1/commands/reinstall-node","id":"http://localhost:8150/api/commands/reinstall-node"},{"name":"disable-policy","rel":"http://api.puppetlabs.com/razor/v1/commands/disable-policy","id":"http://localhost:8150/api/commands/disable-policy"},{"name":"enable-policy","rel":"http://api.puppetlabs.com/razor/v1/commands/enable-policy","id":"http://localhost:8150/api/commands/enable-policy"},{"name":"create-repo","rel":"http://api.puppetlabs.com/razor/v1/commands/create-repo","id":"http://localhost:8150/api/commands/create-repo"},{"name":"remove-node-metadata","rel":"http://api.puppetlabs.com/razor/v1/commands/remove-node-metadata","id":"http://localhost:8150/api/commands/remove-node-metadata"},{"name":"modify-node-metadata","rel":"http://api.puppetlabs.com/razor/v1/commands/modify-node-metadata","id":"http://localhost:8150/api/commands/modify-node-metadata"},{"name":"update-policy-node-metadata","rel":"http://api.puppetlabs.com/razor/v1/commands/update-policy-node-metadata","id":"http://localhost:8150/api/commands/update-policy-node-metadata"},{"name":"add-policy-tag","rel":"http://api.puppetlabs.com/razor/v1/commands/add-policy-tag","id":"http://localhost:8150/api/commands/add-policy-tag"},{"name":"remove-policy-tag","rel":"http://api.puppetlabs.com/razor/v1/commands/remove-policy-tag","id":"http://localhost:8150/api/commands/remove-policy-tag"},{"name":"create-hook","rel":"http://api.puppetlabs.com/razor/v1/commands/create-hook","id":"http://localhost:8150/api/commands/create-hook"},{"name":"update-policy-repo","rel":"http://api.puppetlabs.com/razor/v1/commands/update-policy-repo","id":"http://localhost:8150/api/commands/update-policy-repo"},{"name":"update-tag-rule","rel":"http://api.puppetlabs.com/razor/v1/commands/update-tag-rule","id":"http://localhost:8150/api/commands/update-tag-rule"},{"name":"delete-policy","rel":"http://api.puppetlabs.com/razor/v1/commands/delete-policy","id":"http://localhost:8150/api/commands/delete-policy"},{"name":"delete-tag","rel":"http://api.puppetlabs.com/razor/v1/commands/delete-tag","id":"http://localhost:8150/api/commands/delete-tag"},{"name":"create-tag","rel":"http://api.puppetlabs.com/razor/v1/commands/create-tag","id":"http://localhost:8150/api/commands/create-tag"},{"name":"delete-node","rel":"http://api.puppetlabs.com/razor/v1/commands/delete-node","id":"http://localhost:8150/api/commands/delete-node"},{"name":"reboot-node","rel":"http://api.puppetlabs.com/razor/v1/commands/reboot-node","id":"http://localhost:8150/api/commands/reboot-node"},{"name":"move-policy","rel":"http://api.puppetlabs.com/razor/v1/commands/move-policy","id":"http://localhost:8150/api/commands/move-policy"},{"name":"set-node-ipmi-credentials","rel":"http://api.puppetlabs.com/razor/v1/commands/set-node-ipmi-credentials","id":"http://localhost:8150/api/commands/set-node-ipmi-credentials"},{"name":"delete-repo","rel":"http://api.puppetlabs.com/razor/v1/commands/delete-repo","id":"http://localhost:8150/api/commands/delete-repo"},{"name":"modify-policy-max-count","rel":"http://api.puppetlabs.com/razor/v1/commands/modify-policy-max-count","id":"http://localhost:8150/api/commands/modify-policy-max-count"},{"name":"update-node-metadata","rel":"http://api.puppetlabs.com/razor/v1/commands/update-node-metadata","id":"http://localhost:8150/api/commands/update-node-metadata"},{"name":"create-task","rel":"http://api.puppetlabs.com/razor/v1/commands/create-task","id":"http://localhost:8150/api/commands/create-task"},{"name":"update-hook-configuration","rel":"http://api.puppetlabs.com/razor/v1/commands/update-hook-configuration","id":"http://localhost:8150/api/commands/update-hook-configuration"},{"name":"create-broker","rel":"http://api.puppetlabs.com/razor/v1/commands/create-broker","id":"http://localhost:8150/api/commands/create-broker"},{"name":"update-broker-configuration","rel":"http://api.puppetlabs.com/razor/v1/commands/update-broker-configuration","id":"http://localhost:8150/api/commands/update-broker-configuration"}],"collections":[{"name":"brokers","rel":"http://api.puppetlabs.com/razor/v1/collections/brokers","id":"http://localhost:8150/api/collections/brokers","params":{"depth":{"type":"number"}}},{"name":"repos","rel":"http://api.puppetlabs.com/razor/v1/collections/repos","id":"http://localhost:8150/api/collections/repos","params":{"depth":{"type":"number"}}},{"name":"tags","rel":"http://api.puppetlabs.com/razor/v1/collections/tags","id":"http://localhost:8150/api/collections/tags","params":{"depth":{"type":"number"}}},{"name":"policies","rel":"http://api.puppetlabs.com/razor/v1/collections/policies","id":"http://localhost:8150/api/collections/policies","params":{"depth":{"type":"number"}}},{"name":"nodes","rel":"http://api.puppetlabs.com/razor/v1/collections/nodes","id":"http://localhost:8150/api/collections/nodes","params":{"start":{"type":"number"},"limit":{"type":"number"},"depth":{"type":"number"}}},{"name":"tasks","rel":"http://api.puppetlabs.com/razor/v1/collections/tasks","id":"http://localhost:8150/api/collections/tasks","params":{"depth":{"type":"number"}}},{"name":"commands","rel":"http://api.puppetlabs.com/razor/v1/collections/commands","id":"http://localhost:8150/api/collections/commands","params":{"depth":{"type":"number"}}},{"name":"events","rel":"http://api.puppetlabs.com/razor/v1/collections/events","id":"http://localhost:8150/api/collections/events","params":{"start":{"type":"number"},"limit":{"type":"number"},"depth":{"type":"number"}}},{"name":"hooks","rel":"http://api.puppetlabs.com/razor/v1/collections/hooks","id":"http://localhost:8150/api/collections/hooks","params":{"depth":{"type":"number"}}},{"name":"config","rel":"http://api.puppetlabs.com/razor/v1/collections/config","id":"http://localhost:8150/api/collections/config"}],"version":{"server":"v1.9.5-9-g774b5ce-dirty"}}'
    http_version:
  recorded_at: Fri, 23 Aug 2019 19:49:25 GMT
- request:
    method: get
    uri: http://localhost:8150/api/commands/modify-node-metadata
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Accept-Language:
      - en_US,en
      User-Agent:
      - Faraday v0.15.4
      Authorization:
      - Basic Og==
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - Apache-Coyote/1.1
      Etag:
      - '"server-version-v1.9.5-9-g774b5ce-dirty"'
      X-Content-Type-Options:
      - nosniff
      Content-Type:
      - application/json
      Content-Length:
      - '6319'
      Date:
      - Fri, 23 Aug 2019 19:49:24 GMT
    body:
      encoding: UTF-8
      string: '{"name":"modify-node-metadata","help":{"summary":"Perform various editing
        operations on node metadata","description":"Node metadata can be added, changed,
        or removed with this command; it contains\na limited editing language to make
        changes to the existing metadata in an\natomic fashion.\n\nValues to keys
        in update operations can be structured data such as arrays and hashes.\n\nIt
        can also clear all metadata from a node, although that operation is\nexclusive
        to all other editing operations, and cannot be performed atomically\nwith
        them.","schema":"# Access Control\n\nThis command''s access control pattern:
        `commands:modify-node-metadata:%{node}`\n\nWords surrounded by `%{...}` are
        substitutions from the input data: typically\nthe name of the object being
        modified, or some other critical detail, these\nallow roles to be granted
        partial access to modify the system.\n\nFor more detail on how the permission
        strings are structured and work, you can\nsee the [Shiro Permissions documentation][shiro].  That
        pattern is expanded\nand then a permission check applied to it, before the
        command is authorized.\n\nThese checks only apply if security is enabled in
        the Razor configuration\nfile; on this server security is currently disabled.\n\n[shiro]:
        http://shiro.apache.org/permissions.html\n\n# Attributes\n\n * node\n   -
        The name of the node for which to modify metadata.\n   - This attribute is
        required.\n   - It must be of type string.\n   - It must match the name of
        an existing node.\n   - Its argument position is 0.\n\n * update\n   - The
        metadata to update\n   - It must be of type object.\n\n * remove\n   - The
        metadata to remove\n   - It must be of type array.\n\n * clear\n   - Remove
        all metadata from the node.  Cannot be used together with\n     either ''update''
        or ''remove''.\n   - It must be of type boolean.\n   - If present, update,
        remove must not be present.\n\n * no_replace\n   - If true, the `update` operation
        will cause this command to fail if the\n     metadata key is already present
        on the node. No effect on `remove` or\n     clear. This error can be suppressed
        through the `force` flag.\n   - It must be of type boolean.\n\n * force\n   -
        If true, no error will be thrown when `no_replace` is true but a key\n     already
        exists. Instead, this key will just be skipped.\n   - It must be of type boolean.\n","examples":{"api":"Editing
        node metadata, by adding and removing some keys, but refusing to\nmodify an
        existing value already present on a node:\n\n    {\n        \"node\": \"node1\",\n        \"update\":
        {\n            \"key1\": \"value1\",\n            \"key2\": [ \"val1\", \"val2\",
        \"val3\" ]\n        }\n        \"remove\": [\"key3\", \"key4\"],\n        \"no_replace\":
        true\n    }\n\nRemoving all node metadata:\n\n    {\"node\": \"node1\", \"clear\":
        true}","cli":"Editing node metadata, by adding and removing some keys, but
        refusing to\nmodify an existing value already present on a node:\n\n    razor
        modify-node-metadata --node node1 --update key1=value1 \\\n        --update
        key2=''[ \"val1\", \"val2\", \"val3\" ]'' --remove key3 --remove key4 --noreplace\n\nRemoving
        all node metadata:\n\n    razor modify-node-metadata --node node1 --clear\n\nWith
        positional arguments, this can be shortened::\n\n    razor modify-node-metadata
        node1 --clear"},"full":"# SYNOPSIS\nPerform various editing operations on
        node metadata\n\n# DESCRIPTION\nNode metadata can be added, changed, or removed
        with this command; it contains\na limited editing language to make changes
        to the existing metadata in an\natomic fashion.\n\nValues to keys in update
        operations can be structured data such as arrays and hashes.\n\nIt can also
        clear all metadata from a node, although that operation is\nexclusive to all
        other editing operations, and cannot be performed atomically\nwith them.\n#
        Access Control\n\nThis command''s access control pattern: `commands:modify-node-metadata:%{node}`\n\nWords
        surrounded by `%{...}` are substitutions from the input data: typically\nthe
        name of the object being modified, or some other critical detail, these\nallow
        roles to be granted partial access to modify the system.\n\nFor more detail
        on how the permission strings are structured and work, you can\nsee the [Shiro
        Permissions documentation][shiro].  That pattern is expanded\nand then a permission
        check applied to it, before the command is authorized.\n\nThese checks only
        apply if security is enabled in the Razor configuration\nfile; on this server
        security is currently disabled.\n\n[shiro]: http://shiro.apache.org/permissions.html\n\n#
        Attributes\n\n * node\n   - The name of the node for which to modify metadata.\n   -
        This attribute is required.\n   - It must be of type string.\n   - It must
        match the name of an existing node.\n   - Its argument position is 0.\n\n
        * update\n   - The metadata to update\n   - It must be of type object.\n\n
        * remove\n   - The metadata to remove\n   - It must be of type array.\n\n
        * clear\n   - Remove all metadata from the node.  Cannot be used together
        with\n     either ''update'' or ''remove''.\n   - It must be of type boolean.\n   -
        If present, update, remove must not be present.\n\n * no_replace\n   - If
        true, the `update` operation will cause this command to fail if the\n     metadata
        key is already present on the node. No effect on `remove` or\n     clear.
        This error can be suppressed through the `force` flag.\n   - It must be of
        type boolean.\n\n * force\n   - If true, no error will be thrown when `no_replace`
        is true but a key\n     already exists. Instead, this key will just be skipped.\n   -
        It must be of type boolean.\n\n# EXAMPLES\n\n  Editing node metadata, by adding
        and removing some keys, but refusing to\n  modify an existing value already
        present on a node:\n  \n      {\n          \"node\": \"node1\",\n          \"update\":
        {\n              \"key1\": \"value1\",\n              \"key2\": [ \"val1\",
        \"val2\", \"val3\" ]\n          }\n          \"remove\": [\"key3\", \"key4\"],\n          \"no_replace\":
        true\n      }\n  \n  Removing all node metadata:\n  \n      {\"node\": \"node1\",
        \"clear\": true}\n"},"schema":{"node":{"type":"string","position":0},"update":{"type":"object"},"remove":{"type":"array"},"clear":{"type":"boolean"},"no_replace":{"type":"boolean","aliases":["no-replace"]},"force":{"type":"boolean"}}}'
    http_version:
  recorded_at: Fri, 23 Aug 2019 19:49:25 GMT
- request:
    method: post
    uri: http://localhost:8150/api/commands/modify-node-metadata
    body:
      encoding: UTF-8
      string: '{"node":"node1","update":{"keyᓱ123":"valueᓱ1"}}'
    headers:
      Content-Type:
      - application/json
      Accept:
      - application/json
      Accept-Language:
      - en_US,en
      User-Agent:
      - Faraday v0.15.4
      Authorization:
      - Basic Og==
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 202
      message: Accepted
    headers:
      Server:
      - Apache-Coyote/1.1
      X-Content-Type-Options:
      - nosniff
      Content-Type:
      - application/json
      Content-Length:
      - '203'
      Date:
      - Fri, 23 Aug 2019 19:49:24 GMT
    body:
      encoding: UTF-8
      string: '{"spec":"http://api.puppetlabs.com/razor/v1/collections/nodes/member","id":"http://localhost:8150/api/collections/nodes/node1","name":"node1","command":"http://localhost:8150/api/collections/commands/2"}'
    http_version:
  recorded_at: Fri, 23 Aug 2019 19:49:25 GMT
- request:
    method: get
    uri: http://localhost:8150/api/collections/nodes/node1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - application/json
      Accept-Language:
      - en_US,en
      User-Agent:
      - Faraday v0.15.4
      Authorization:
      - Basic Og==
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - Apache-Coyote/1.1
      X-Content-Type-Options:
      - nosniff
      Content-Type:
      - application/json
      Content-Length:
      - '435'
      Date:
      - Fri, 23 Aug 2019 19:49:24 GMT
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        eyJzcGVjIjoiaHR0cDovL2FwaS5wdXBwZXRsYWJzLmNvbS9yYXpvci92MS9j
        b2xsZWN0aW9ucy9ub2Rlcy9tZW1iZXIiLCJpZCI6Imh0dHA6Ly9sb2NhbGhv
        c3Q6ODE1MC9hcGkvY29sbGVjdGlvbnMvbm9kZXMvbm9kZTEiLCJuYW1lIjoi
        bm9kZTEiLCJod19pbmZvIjp7Im1hYyI6WyJhYmNkZWYiXX0sImxvZyI6eyJp
        ZCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODE1MC9hcGkvY29sbGVjdGlvbnMvbm9k
        ZXMvbm9kZTEvbG9nIiwibmFtZSI6ImxvZyIsInBhcmFtcyI6eyJsaW1pdCI6
        eyJ0eXBlIjoibnVtYmVyIn0sInN0YXJ0Ijp7InR5cGUiOiJudW1iZXIifX19
        LCJ0YWdzIjpbXSwibWV0YWRhdGEiOnsia2V54ZOxMTIzIjoidmFsdWXhk7Ex
        In0sInN0YXRlIjp7Imluc3RhbGxlZCI6InRydWUiLCJpbnN0YWxsZWRfYXQi
        OiIyMDE5LTA4LTIzVDE0OjQ5OjI1LTA1OjAwIn19
    http_version:
  recorded_at: Fri, 23 Aug 2019 19:49:25 GMT
recorded_with: VCR 4.0.0
