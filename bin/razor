#!/usr/bin/env ruby

require 'rubygems'
require 'gettext-setup'
require_relative "../lib/razor/cli"

GettextSetup.initialize(File.absolute_path('locales', File.dirname(File.dirname(__FILE__))))
FastGettext.locale = GettextSetup.negotiate_locale(GettextSetup.candidate_locales)

include Razor::CLI::Format

def die(message = nil)
  puts _("Error: %{error}") % {error: message} if message
  exit 1
end

def unexpected_error(e)
  die _(<<-ERROR) % {backtrace: e.backtrace.take(10).join("\n"), error: e}
An unexpected error has occurred.

Backtrace:
  %{backtrace}

Error: %{error}

Please inspect server logs for the cause, then report issue to:
https://tickets.puppetlabs.com/browse/RAZOR

  ERROR
end

begin
  parse = Razor::CLI::Parse.new(ARGV)

  if parse.show_version?
    version, exit_code = parse.version
    puts version
    exit exit_code
  end

  if parse.show_help? and not parse.show_command_help?
    output, exitcode = parse.help
    puts output
    exit exitcode
  end

  navigate = parse.navigate

  document = navigate.get_document
  url = parse.navigate.last_url
  result = format_document document, parse
  # TRANSLATORS: This is a template for all results that the client outputs.
  puts _("From %{url}:\n\n%{result}\n\n") % {url: url, result: result}
rescue Razor::CLI::InvalidURIError, Razor::CLI::UnauthorizedError => e
  puts e.message
  die
rescue OptionParser::InvalidOption => e
  # TRANSLATORS: This occurs when invalid flags are passed in the navigation.
  die _("%{error}\nTry 'razor --help' for more information") %
      {error: e.message}
rescue SocketError, Faraday::ConnectionFailed => e
  puts _("Error: Could not connect to the server at %{url}\n" +
         "       %{error}") % {url: parse.api_url, error: e}
  die
rescue Faraday::SSLError
  puts _("Error: SSL certificate could not be verified against known CA " +
         "certificates.\n       To turn off verification, use the -k or --insecure option.")
  die
rescue Faraday::Error => e
  r = e.response
  unexpected_error(e) if r.nil?
  request_type = r.request.method.to_s.upcase
  url = r.request.url
  puts _("Error from doing %{request_type} %{url}") % {request_type: request_type, url: url}
  puts e.message
  begin
    body = MultiJson::load(r.body)
    puts body.delete("details") if body["details"]
    unless body.empty?
      puts format_document(body)
    end
  rescue => e
    # Ignore errors here; our best efforts at telling the user more about
    # what happened has failed. Just dump the response
    puts r.body
  end
  die
rescue StandardError => e
  die _("%{error}\nTry 'razor --help' for more information\n\n") % {error: e.message}
end
